miniMaxMidEndPhase(vector  board, int flag, int depth, int alpha, int beta) {
 int temp = evaluateMidEndPhase(board);
 if (depth == 0)
  return new Node(temp, board);
 else if (temp == 10000)
  return new Node(10000, board);
 else if (temp == -10000)
  return new Node(-10000, board);
 else {
  // minimizer
  if (flag == 0) {
   int ret = 100000, bCount = 0;
   Node * temp;
   vector  bestBoard = board;
   vector  nb;
   for (int i = 0; i  3) {
    for (int i = 0; i < board.size(); i++) {
     if (board[i] == "B") {
      nb = neighbours(i);
      for (int tp : nb) {
       if (board[tp] == "x") {
        board[tp] = "B";
        board[i] = "x";
        if (closeMill(board, tp)) {
         for (int j = 0; j miniMaxEstimate miniMaxEstimate;}
           if (ret miniMaxEstimate miniMaxEstimate;}
         if (ret <= alpha)
          return new Node(ret, board);
         beta = min(beta, ret);}
        board[tp] = "x";
        board[i] = "B";}}}}}
   else if (bCount == 3) {
    for (int i = 0; i < board.size(); i++) {
     if (board[i] == "B") {
      for (int tp = 0; tp = beta)
            return new Node(ret, board);
           alpha = max(alpha, ret);
           board[j] = "B";}}}
        else {
         temp = miniMaxMidEndPhase(board, 0, depth - 1, alpha, beta);
         if (temp->miniMaxEstimate > ret) {
          bestBoard = board;
          ret = temp->miniMaxEstimate;}
         if (ret >= beta)
          return new Node(ret, board);
         alpha = max(alpha, ret);}
        board[tp] = "x";
        board[i] = "W";}}}}}
   else if (wCount == 3) {
    for (int i = 0; i miniMaxEstimate;}
           if (ret >= beta)
            return new Node(ret, board);
           alpha = max(alpha, ret);
           board[j] = "B";}}}
        else {
         temp = miniMaxMidEndPhase(board, 0, depth - 1, alpha, beta);
         if (temp->miniMaxEstimate > ret) {
          bestBoard = board;
          ret = temp->miniMaxEstimate;}
         if (ret >= beta)
          return new Node(ret, board);
         alpha = max(alpha, ret);}
        board[tp] = "x";
        board[i] = "W";}}}}}
   return new Node(ret, bestBoard);}}}  
   
   bool closeMill(vector  board, int pos) {
 switch (pos) {
 case 0: {
  if ((board[1] == board[0] && board[2] == board[0]) || (board[3] == board[0] && 
  board[6] == board[0]) || (board[8] == board[0] && board[20] == board[0])) 
  return true;
  else return false; }
 case 1: {
  if ((board[0] == board[1] && board[2] == board[1])) return true;
  else return false; }
 case 2: {
  if ((board[0] == board[2] && board[1] == board[2]) || (board[5] == board[2] && 
  board[7] == board[2]) || (board[13] == board[2] && board[22] == board[2])) 
  return true;
  else return false; }
 case 3: {
  if ((board[0] == board[3] && board[6] == board[3]) || (board[4] == board[3] && 
  board[5] == board[3]) || (board[9] == board[3] && board[17] == board[3])) 
  return true;
  else return false; }
 case 4: {
  if ((board[3] == board[4] && board[5] == board[4])) return true;
  else return false; }
 case 5: {
  if ((board[2] == board[5] && board[7] == board[5]) || (board[3] == board[5] && 
  board[4] == board[5]) || (board[12] == board[5] && board[19] == board[5])) 
  return true;
  else return false; }
 case 6: {
  if ((board[0] == board[6] && board[3] == board[6]) || (board[10] == board[6] 
  && board[14] == board[6])) return true;
  else return false; }
 case 7: {
  if ((board[2] == board[7] && board[5] == board[7]) || (board[11] == board[7] 
  && board[16] == board[7])) return true;
  else return false; }
 case 8: {
  if ((board[0] == board[8] && board[20] == board[8]) || (board[9] == board[8] 
  && board[10] == board[8])) return true;
  else return false; }
 case 9: {
  if ((board[8] == board[9] && board[10] == board[9]) || (board[3] == board[9] 
  && board[17] == board[9])) return true;
  else return false; }
 case 10: {
  if ((board[8] == board[10] && board[9] == board[10]) || (board[6] == board[10] 
  && board[14] == board[10])) return true;
  else return false; }
 case 11: {
  if ((board[7] == board[11] && board[16] == board[11]) || (board[12] == 
  board[11] && board[13] == board[11])) return true;
  else return false; }
 case 12: {
  if ((board[11] == board[12] && board[13] == board[12]) || (board[5] == 
  board[12] && board[19] == board[12])) return true;
  else return false; }
 case 13: {
  if ((board[11] == board[13] && board[12] == board[13]) || (board[2] == 
  board[13] && board[22] == board[13])) return true;
  else return false; }
 case 14: {
  if ((board[6] == board[14] && board[10] == board[14]) || (board[15] == 
  board[14] && board[16] == board[14]) || (board[17] == board[14] && board[20] 
  == board[14])) return true;
  else return false; }
 case 15: {
  if ((board[14] == board[15] && board[16] == board[15]) || (board[18] == 
  board[15] && board[21] == board[15])) return true;
  else return false; }
 case 16: {
  if ((board[14] == board[16] && board[15] == board[16]) || (board[19] == 
  board[16] && board[22] == board[16]) || (board[7] == board[16] && board[11] == 
  board[16])) return true;
  else return false; }
 case 17: {
  if ((board[3] == board[17] && board[9] == board[17]) || (board[18] == 
  board[17] && board[19] == board[17]) || (board[14] == board[17] && board[20] 
  == board[17])) return true;
  else return false; }
 case 18: {
  if ((board[15] == board[18] && board[21] == board[18]) || (board[17] == 
  board[18] && board[19] == board[18])) return true;
  else return false; }
 case 19: {
  if ((board[17] == board[19] && board[18] == board[19]) || (board[5] == 
  board[19] && board[12] == board[19]) || (board[16] == board[19] && board[22] 
  == board[19])) return true;
  else return false; }
 case 20: {
  if ((board[0] == board[20] && board[8] == board[20]) || (board[21] == 
  board[20] && board[22] == board[20]) || (board[14] == board[20] && board[17] 
  == board[20])) return true;
  else return false; }
 case 21: {
  if ((board[20] == board[21] && board[22] == board[21]) || (board[15] == 
  board[21] && board[18] == board[21])) return true;
  else return false; }
 case 22: {
  if ((board[20] == board[22] && board[21] == board[22]) || (board[16] == 
  board[22] && board[19] == board[22]) || (board[2] == board[22] && board[13] == 
  board[22])) return true;
  else return false; }
 default:
  return false;}}
